plugins {
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.3.0"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

def ENV = System.getenv()
version = "${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: 9999}+mc${minecraft_version}"
group = 'com.sunekaer.mods'
archivesBaseName = 'Mute'

loom {
    silentMojangMappingsLicense()

    forge {
        mixinConfigs = [
        ]

        dataGen {
            mod "toolkit"
        }

        launches {
            data {
                arg "--existing", file("src/main/resources").absolutePath
            }
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    mappings loom.layered() {
        officialMojangMappings()
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    manifest {
        attributes([
                "Specification-Title"     : "mute",
                "Specification-Vendor"    : "Sunekaer",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Sunekaer",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

java {
    withSourcesJar()
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
        if (providers.environmentVariable("NANITE_TOKEN").orNull) {
            maven {
                url "${maven_url}/releases"
                credentials {
                    username = "nanite"
                    password = providers.environmentVariable("NANITE_TOKEN").get()
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def forgeOptions = publishOptions {
        file = project.provider { project.tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "${project.name} Forge ${mod_version}+mc${minecraft_version}"
        modLoaders.add("forge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curseforge_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "${modrinth_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeForge") {
        from(curseForgeOptions, forgeOptions)
    }

    if (providers.environmentVariable("MODRINTH_TOKEN").getOrNull() != null) {
        modrinth("modrinthForge") {
            from(modrinthOptions, forgeOptions)
        }
    }
}